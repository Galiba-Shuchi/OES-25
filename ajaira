#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>



#define ADMIN_FILE "admin.txt"    
#define VERIFY_CODE "SECRET123" 
#define TEACHER_FILE "teacher.txt"
#define TEACHER_VERIFY_CODE "TEACH2025"
#define USER_FILE "user.txt"
#define COUNSELING_FILE "counseling.txt"
#define MEDIA_FILE "media_links.txt"

//structures
typedef struct
{
    char student_id[20];
    char name[50];
    char password[50];
    char student_role[10];
} user;

typedef struct
{
    char teacher_id[20];
    char name[50];
    char password[50];
    char subject[30];
} teacher;

typedef struct
{
    char admin_id[20];
    char name[50];
    char password[50];
    char admin_role[10];
} admin;

typedef struct
{
    char course_name[100];
    char course_code[20];
} Course;

typedef struct
{
    char course_code[20];
    char question[300];
    char option_a[100];
    char option_b[100];
    char option_c[100];
    char option_d[100];
    char check;
} MCQ;

typedef struct
{
    char question[300];
    char correct_answer;
    char student_answer;
} WrongAnswer;

typedef struct
{
    char student_id[20];
    char course_code[20];
    int score;
} ExamResult;

typedef struct
{
    char student_id[20];
    char student_name[50];
    char teacher_id[20];
    char teacher_name[50];
    char date[20];
    char topic[100];
    char notes[300];
} Counseling;

typedef struct
{
    char title[100];
    char course_code[20];
    char media_type[20];
    char url[200];
} MediaLink;

// --- User (student) functions ---
void registerUser();
int loginUser();
void displayUser(const user *u);
void updateUser(user *u);
void deleteUser(user *u);

// --- Teacher functions ---
void registerTeacher();  // with special verification code
int loginTeacher();
void displayTeacher(const teacher *t);
void updateTeacher(teacher *t);
void deleteTeacher(teacher *t);

// --- Admin functions ---
void registerAdmin(const char *admin_role);  // with special verification code
int loginAdmin();
void displayAdmin(const admin *a);

// --- Course functions ---
void addCourse();
void showCourses();
void updateCourse();
void deleteCourse();

// --- MCQ functions ---
void addQuestion();
void showQuestions();
void updateQuestion();
void deleteQuestion();

// --- Exam functions ---
void studentExam();
void examRules();
void showAllResults();
void addExamResult(ExamResult *result);
void displayExamResult(const ExamResult *result);

// --- Counseling functions ---
void addCounseling(const Counseling *c);
void showCounselings(const char *student_id);
void updateCounseling(const char *student_id, const char *date);
void deleteCounseling(const char *student_id, const char *date);


// --- MediaLink functions ---
void addMediaLink(const MediaLink *m);
void showMediaLinks(const char *course_code);
void updateMediaLink(const char *course_code, const char *title);
void deleteMediaLink(const char *course_code, const char *title);


// --- Menus ---
void adminMenu();
void teacherMenu();
void studentMenu();




// Function to verify admin special code
int verifySpecialCode(const char *role) {
    char inputCode[50];
    const char *correctCode;

    if (strcmp(role, "admin") == 0) {
        correctCode = "ADMIN123";
    } else {
        printf("Unknown role for verification.\n");
        return 0;
    }

    printf("Enter verification code for %s: ", role);
    scanf("%49s", inputCode);

    if (strcmp(inputCode, correctCode) == 0) {
        printf("✅ Verification successful!\n");
        return 1;
    } else {
        printf("❌ Verification failed! Incorrect code.\n");
        return 0;
    }
}



// Admin registration function
void registerAdmin(const char *admin_role) {
    if (!verifySpecialCode(admin_role)) {
        printf("Access denied. Registration failed.\n");
        return;
    }

    admin a;

    printf("Enter Admin ID: ");
    scanf("%19s", a.admin_id);
    printf("Enter Name: ");
    scanf(" %[^\n]", a.name);
    printf("Enter Password: ");
    scanf("%49s", a.password);

    strcpy(a.admin_role, admin_role);

    FILE *fp = fopen(ADMIN_FILE, "a");
    if (!fp) {
        perror("Error opening admin file");
        return;
    }
    fprintf(fp, "%s|%s|%s|%s\n", a.admin_id, a.name, a.password, a.admin_role);
    fclose(fp);

    printf("Admin registered successfully!\n");
}



// Admin login function
int loginAdmin() {
    char id[20], password[50];
    printf("Enter Admin ID: ");
    scanf("%19s", id);
    printf("Enter Password: ");
    scanf("%49s", password);

    FILE *fp = fopen(ADMIN_FILE, "r");
    if (!fp) {
        perror("Error opening admin file");
        return 0; // failed login
    }

    admin a;
    int found = 0;
    while (fscanf(fp, "%19[^|]|%49[^|]|%49[^|]|%9[^\n]\n", a.admin_id, a.name, a.password, a.admin_role) == 4) {
        if (strcmp(id, a.admin_id) == 0 && strcmp(password, a.password) == 0) {
            found = 1;
            break;
        }
    }
    fclose(fp);

    if (found) {
        printf("✅ Admin login successful. Welcome, %s!\n", a.name);
        return 1;  // success
    } else {
        printf("❌ Login failed. Invalid ID or password.\n");
        return 0;  // fail
    }
}



    
// Function to verify teacher special code
int verifyTeacherCode() {
    char inputCode[50];
    const char *correctCode = "TEACHER456";

    printf("Enter verification code for teacher: ");
    scanf("%49s", inputCode);

    if (strcmp(inputCode, correctCode) == 0) {
        printf("✅ Verification successful!\n");
        return 1;
    } else {
        printf("❌ Verification failed! Incorrect code.\n");
        return 0;
    }
}




// Teacher registration function
void registerTeacher() {
    if (!verifyTeacherCode()) {
        printf("Access denied. Registration failed.\n");
        return;
    }

    teacher t;

    printf("Enter Teacher ID: ");
    scanf("%19s", t.teacher_id);
    printf("Enter Name: ");
    scanf(" %[^\n]", t.name);
    printf("Enter Password: ");
    scanf("%49s", t.password);
    printf("Enter Subject: ");
    scanf(" %[^\n]", t.subject);

    FILE *fp = fopen(TEACHER_FILE, "a");
    if (!fp) {
        perror("Error opening teacher file");
        return;
    }
    fprintf(fp, "%s|%s|%s|%s\n", t.teacher_id, t.name, t.password, t.subject);
    fclose(fp);

    printf("Teacher registered successfully!\n");
}




// Teacher login function
int loginTeacher() {
    char id[20], password[50];
    printf("Enter Teacher ID: ");
    scanf("%19s", id);
    printf("Enter Password: ");
    scanf("%49s", password);

    FILE *fp = fopen(TEACHER_FILE, "r");
    if (!fp) {
        perror("Error opening teacher file");
        return 0; // failed login
    }

    teacher t;
    int found = 0;
    while (fscanf(fp, "%19[^|]|%49[^|]|%49[^|]|%29[^\n]\n", t.teacher_id, t.name, t.password, t.subject) == 4) {
        if (strcmp(id, t.teacher_id) == 0 && strcmp(password, t.password) == 0) {
            found = 1;
            break;
        }
    }
    fclose(fp);

    if (found) {
        printf("✅ Teacher login successful. Welcome, %s!\n", t.name);
        return 1;  // success
    } else {
        printf("❌ Login failed. Invalid ID or password.\n");
        return 0;  // fail
    }
}




// User registration function
void registerUser() {
    user u;

    printf("Enter Student ID: ");
    scanf("%19s", u.student_id);
    printf("Enter Name: ");
    scanf(" %[^\n]", u.name);
    printf("Enter Password: ");
    scanf("%49s", u.password);

    // You can set role here if needed, e.g. "student"
    strcpy(u.student_role, "student");

    FILE *fp = fopen(USER_FILE, "a");
    if (!fp) {
        perror("Error opening user file");
        return;
    }
    fprintf(fp, "%s|%s|%s|%s\n", u.student_id, u.name, u.password, u.student_role);
    fclose(fp);

    printf("User registered successfully!\n");
}



// User login function
int loginUser() {
    char id[20], password[50];
    printf("Enter Student ID: ");
    scanf("%19s", id);
    printf("Enter Password: ");
    scanf("%49s", password);

    FILE *fp = fopen(USER_FILE, "r");
    if (!fp) {
        perror("Error opening user file");
        return 0; // failed login
    }

    user u;
    int found = 0;
    while (fscanf(fp, "%19[^|]|%49[^|]|%49[^|]|%9[^\n]\n", u.student_id, u.name, u.password, u.student_role) == 4) {
        if (strcmp(id, u.student_id) == 0 && strcmp(password, u.password) == 0) {
            found = 1;
            break;
        }
    }
    fclose(fp);

    if (found) {
        printf("✅ User login successful. Welcome, %s!\n", u.name);
        return 1;  // success
    } else {
        printf("❌ Login failed. Invalid ID or password.\n");
        return 0;  // fail
    }
}




void updateUser(user *u) {
    if (u == NULL) {
        printf("Invalid user pointer.\n");
        return;
    }

    FILE *fp = fopen(USER_FILE, "r");
    FILE *temp = fopen("temp.txt", "w");
    if (!fp || !temp) {
        perror("File error");
        if (fp) fclose(fp);
        if (temp) fclose(temp);
        return;
    }

    user tempUser;
    int found = 0;

    while (fscanf(fp, "%19[^|]|%49[^|]|%49[^|]|%9[^\n]\n", tempUser.student_id, tempUser.name, tempUser.password, tempUser.student_role) == 4) {
        if (strcmp(tempUser.student_id, u->student_id) == 0) {
            found = 1;
            // Write updated user info passed in 'u'
            fprintf(temp, "%s|%s|%s|%s\n", u->student_id, u->name, u->password, u->student_role);
        } else {
            // Write existing user info as-is
            fprintf(temp, "%s|%s|%s|%s\n", tempUser.student_id, tempUser.name, tempUser.password, tempUser.student_role);
        }
    }

    fclose(fp);
    fclose(temp);

    if (!found) {
        printf("User with ID %s not found.\n", u->student_id);
        remove("temp.txt");
        return;
    }

    remove(USER_FILE);
    rename("temp.txt", USER_FILE);
    printf("User updated successfully.\n");
}


void deleteUser(user *u) {
    if (u == NULL) {
        printf("Invalid user pointer.\n");
        return;
    }

    FILE *fp = fopen(USER_FILE, "r");
    FILE *temp = fopen("temp.txt", "w");
    if (!fp || !temp) {
        perror("File error");
        if (fp) fclose(fp);
        if (temp) fclose(temp);
        return;
    }

    user tempUser;
    int found = 0;

    while (fscanf(fp, "%19[^|]|%49[^|]|%49[^|]|%9[^\n]\n", tempUser.student_id, tempUser.name, tempUser.password, tempUser.student_role) == 4) {
        if (strcmp(tempUser.student_id, u->student_id) == 0) {
            found = 1;
            // skip writing this user to delete
            continue;
        }
        fprintf(temp, "%s|%s|%s|%s\n", tempUser.student_id, tempUser.name, tempUser.password, tempUser.student_role);
    }

    fclose(fp);
    fclose(temp);

    if (!found) {
        printf("User with ID %s not found.\n", u->student_id);
        remove("temp.txt");
        return;
    }

    remove(USER_FILE);
    rename("temp.txt", USER_FILE);
    printf("User deleted successfully.\n");
}



void displayTeacher(const teacher *t) {
    printf("Teacher ID: %s\n", t->teacher_id);
    printf("Name: %s\n", t->name);
    printf("Subject: %s\n", t->subject);
}


void updateTeacher(teacher *t) {
    if (t == NULL) {
        printf("Invalid teacher pointer.\n");
        return;
    }

    // Admin verification prompt before proceeding
    char adminCode[50];
    const char *correctAdminCode = "ADMIN123";

    printf("Enter admin verification code to update teacher: ");
    scanf("%49s", adminCode);

    if (strcmp(adminCode, correctAdminCode) != 0) {
        printf("❌ Access denied. Invalid admin code.\n");
        return;
    }

    FILE *fp = fopen("teacher.txt", "r");
    FILE *temp = fopen("temp.txt", "w");
    if (!fp || !temp) {
        perror("File error");
        if(fp) fclose(fp);
        if(temp) fclose(temp);
        return;
    }

    teacher tempTeacher;
    int found = 0;

    while (fscanf(fp, "%19[^|]|%49[^|]|%49[^|]|%29[^\n]\n", tempTeacher.teacher_id, tempTeacher.name, tempTeacher.password, tempTeacher.subject) == 4) {
        if (strcmp(tempTeacher.teacher_id, t->teacher_id) == 0) {
            found = 1;
            // Write updated teacher info
            fprintf(temp, "%s|%s|%s|%s\n", t->teacher_id, t->name, t->password, t->subject);
        } else {
            fprintf(temp, "%s|%s|%s|%s\n", tempTeacher.teacher_id, tempTeacher.name, tempTeacher.password, tempTeacher.subject);
        }
    }

    fclose(fp);
    fclose(temp);

    if (!found) {
        printf("Teacher with ID %s not found.\n", t->teacher_id);
        remove("temp.txt");
        return;
    }

    remove("teacher.txt");
    rename("temp.txt", "teacher.txt");

    printf("Teacher updated successfully.\n");
}


void deleteTeacher(teacher *t) {
    if (t == NULL) {
        printf("Invalid teacher pointer.\n");
        return;
    }

    // Admin verification prompt
    char adminCode[50];
    const char *correctAdminCode = "ADMIN123";

    printf("Enter admin verification code to delete teacher: ");
    scanf("%49s", adminCode);

    if (strcmp(adminCode, correctAdminCode) != 0) {
        printf("❌ Access denied. Invalid admin code.\n");
        return;
    }

    FILE *fp = fopen("teacher.txt", "r");
    FILE *temp = fopen("temp.txt", "w");
    if (!fp || !temp) {
        perror("File error");
        if(fp) fclose(fp);
        if(temp) fclose(temp);
        return;
    }

    teacher tempTeacher;
    int found = 0;

    while (fscanf(fp, "%19[^|]|%49[^|]|%49[^|]|%29[^\n]\n", tempTeacher.teacher_id, tempTeacher.name, tempTeacher.password, tempTeacher.subject) == 4) {
        if (strcmp(tempTeacher.teacher_id, t->teacher_id) == 0) {
            found = 1;
            // skip writing to delete
            continue;
        }
        fprintf(temp, "%s|%s|%s|%s\n", tempTeacher.teacher_id, tempTeacher.name, tempTeacher.password, tempTeacher.subject);
    }

    fclose(fp);
    fclose(temp);

    if (!found) {
        printf("Teacher with ID %s not found.\n", t->teacher_id);
        remove("temp.txt");
        return;
    }

    remove("teacher.txt");
    rename("temp.txt", "teacher.txt");

    printf("Teacher deleted successfully.\n");
}


void addCourse() {
    char adminCode[50];
    const char *correctAdminCode = "ADMIN123";

    printf("Enter admin verification code to add course: ");
    scanf("%49s", adminCode);

    if (strcmp(adminCode, correctAdminCode) != 0) {
        printf("❌ Access denied. Invalid admin code.\n");
        return;
    }

    Course c;
    printf("Enter course name: ");
    getchar(); // consume leftover newline
    fgets(c.course_name, sizeof(c.course_name), stdin);
    c.course_name[strcspn(c.course_name, "\n")] = '\0'; // remove trailing newline

    printf("Enter course code: ");
    scanf("%19s", c.course_code);

    FILE *fp = fopen("course.txt", "a");
    if (!fp) {
        perror("File open error");
        return;
    }

    fprintf(fp, "%s|%s\n", c.course_name, c.course_code);
    fclose(fp);

    printf("Course added successfully.\n");
}


void showCourses() {
    FILE *fp = fopen("course.txt", "r");
    if (!fp) {
        printf("No courses found.\n");
        return;
    }

    Course c;
    printf("Course List:\n");
    printf("---------------\n");
    while (fscanf(fp, "%99[^|]|%19[^\n]\n", c.course_name, c.course_code) == 2) {
        printf("Course Name: %s\n", c.course_name);
        printf("Course Code: %s\n", c.course_code);
        printf("---------------\n");
    }
    fclose(fp);
}



void updateCourse() {
    char adminCode[50];
    const char *correctAdminCode = "ADMIN123";

    printf("Enter admin verification code to update course: ");
    scanf("%49s", adminCode);

    if (strcmp(adminCode, correctAdminCode) != 0) {
        printf("❌ Access denied. Invalid admin code.\n");
        return;
    }

    char code[20];
    printf("Enter course code to update: ");
    scanf("%19s", code);

    FILE *fp = fopen("course.txt", "r");
    FILE *temp = fopen("temp.txt", "w");
    if (!fp || !temp) {
        perror("File error");
        if (fp) fclose(fp);
        if (temp) fclose(temp);
        return;
    }

    Course c;
    int found = 0;

    while (fscanf(fp, "%99[^|]|%19[^\n]\n", c.course_name, c.course_code) == 2) {
        if (strcmp(c.course_code, code) == 0) {
            found = 1;
            printf("Enter new course name: ");
            getchar(); // consume newline
            fgets(c.course_name, sizeof(c.course_name), stdin);
            c.course_name[strcspn(c.course_name, "\n")] = '\0';

            printf("Enter new course code: ");
            scanf("%19s", c.course_code);
        }
        fprintf(temp, "%s|%s\n", c.course_name, c.course_code);
    }

    fclose(fp);
    fclose(temp);

    if (!found) {
        printf("Course with code %s not found.\n", code);
        remove("temp.txt");
        return;
    }

    remove("course.txt");
    rename("temp.txt", "course.txt");
    printf("Course updated successfully.\n");
}



void deleteCourse() {
    char adminCode[50];
    const char *correctAdminCode = "ADMIN123";

    printf("Enter admin verification code to delete course: ");
    scanf("%49s", adminCode);

    if (strcmp(adminCode, correctAdminCode) != 0) {
        printf("❌ Access denied. Invalid admin code.\n");
        return;
    }

    char code[20];
    printf("Enter course code to delete: ");
    scanf("%19s", code);

    FILE *fp = fopen("course.txt", "r");
    FILE *temp = fopen("temp.txt", "w");
    if (!fp || !temp) {
        perror("File error");
        if (fp) fclose(fp);
        if (temp) fclose(temp);
        return;
    }

    Course c;
    int found = 0;

    while (fscanf(fp, "%99[^|]|%19[^\n]\n", c.course_name, c.course_code) == 2) {
        if (strcmp(c.course_code, code) == 0) {
            found = 1;
            // skip writing to delete course
            continue;
        }
        fprintf(temp, "%s|%s\n", c.course_name, c.course_code);
    }

    fclose(fp);
    fclose(temp);

    if (!found) {
        printf("Course with code %s not found.\n", code);
        remove("temp.txt");
        return;
    }

    remove("course.txt");
    rename("temp.txt", "course.txt");

    printf("Course deleted successfully.\n");
}



void addQuestion() {
    char teacherCode[50];
    const char *correctTeacherCode = "TEACHER123";

    printf("Enter teacher verification code to add question: ");
    scanf("%49s", teacherCode);

    if (strcmp(teacherCode, correctTeacherCode) != 0) {
        printf("❌ Access denied. Invalid teacher code.\n");
        return;
    }

    MCQ q;
    printf("Enter course code: ");
    scanf("%19s", q.course_code);
    getchar(); // consume leftover newline

    printf("Enter question: ");
    fgets(q.question, sizeof(q.question), stdin);
    q.question[strcspn(q.question, "\n")] = '\0';

    printf("Enter option A: ");
    fgets(q.option_a, sizeof(q.option_a), stdin);
    q.option_a[strcspn(q.option_a, "\n")] = '\0';

    printf("Enter option B: ");
    fgets(q.option_b, sizeof(q.option_b), stdin);
    q.option_b[strcspn(q.option_b, "\n")] = '\0';

    printf("Enter option C: ");
    fgets(q.option_c, sizeof(q.option_c), stdin);
    q.option_c[strcspn(q.option_c, "\n")] = '\0';

    printf("Enter option D: ");
    fgets(q.option_d, sizeof(q.option_d), stdin);
    q.option_d[strcspn(q.option_d, "\n")] = '\0';

    printf("Enter correct answer (a/b/c/d): ");
    scanf(" %c", &q.check);
    q.check = tolower(q.check);

    FILE *fp = fopen("mcq.txt", "a");
    if (!fp) {
        perror("File open error");
        return;
    }

    fprintf(fp, "%s|%s|%s|%s|%s|%s|%c\n", q.course_code, q.question, q.option_a, q.option_b, q.option_c, q.option_d, q.check);
    fclose(fp);

    printf("Question added successfully.\n");
}



void showQuestionsForAdmin() {
    char adminCode[50];
    const char *correctAdminCode = "ADMIN123";

    printf("Enter admin verification code to view questions: ");
    scanf("%49s", adminCode);

    if (strcmp(adminCode, correctAdminCode) != 0) {
        printf("❌ Access denied. Invalid admin code.\n");
        return;
    }

    FILE *fp = fopen("mcq.txt", "r");
    if (!fp) {
        printf("No questions found.\n");
        return;
    }

    MCQ q;
    printf("MCQ Questions with answers (Admin view):\n");
    printf("---------------------------------------\n");
    while (fscanf(fp, "%19[^|]|%299[^|]|%99[^|]|%99[^|]|%99[^|]|%99[^|]|%c\n",
                  q.course_code, q.question, q.option_a, q.option_b, q.option_c, q.option_d, &q.check) == 7) {
        printf("Course Code: %s\nQuestion: %s\n", q.course_code, q.question);
        printf("A) %s\nB) %s\nC) %s\nD) %s\n", q.option_a, q.option_b, q.option_c, q.option_d);
        printf("Correct Answer: %c\n", q.check);
        printf("---------------------------------------\n");
    }
    fclose(fp);
}


void updateQuestion() {
    char teacherCode[50];
    const char *correctTeacherCode = "TEACHER123";

    printf("Enter teacher verification code to update question: ");
    scanf("%49s", teacherCode);

    if (strcmp(teacherCode, correctTeacherCode) != 0) {
        printf("❌ Access denied. Invalid teacher code.\n");
        return;
    }

    char courseCode[20];
    printf("Enter course code of the question to update: ");
    scanf("%19s", courseCode);

    char oldQuestion[300];
    printf("Enter the exact question text to update: ");
    getchar();
    fgets(oldQuestion, sizeof(oldQuestion), stdin);
    oldQuestion[strcspn(oldQuestion, "\n")] = '\0';

    FILE *fp = fopen("mcq.txt", "r");
    FILE *temp = fopen("temp.txt", "w");
    if (!fp || !temp) {
        perror("File error");
        if (fp) fclose(fp);
        if (temp) fclose(temp);
        return;
    }

    MCQ q;
    int found = 0;

    while (fscanf(fp, "%19[^|]|%299[^|]|%99[^|]|%99[^|]|%99[^|]|%99[^|]|%c\n",
                  q.course_code, q.question, q.option_a, q.option_b, q.option_c, q.option_d, &q.check) == 7) {
        if (strcmp(q.course_code, courseCode) == 0 && strcmp(q.question, oldQuestion) == 0) {
            found = 1;
            printf("Enter new question text: ");
            fgets(q.question, sizeof(q.question), stdin);
            q.question[strcspn(q.question, "\n")] = '\0';

            printf("Enter option A: ");
            fgets(q.option_a, sizeof(q.option_a), stdin);
            q.option_a[strcspn(q.option_a, "\n")] = '\0';

            printf("Enter option B: ");
            fgets(q.option_b, sizeof(q.option_b), stdin);
            q.option_b[strcspn(q.option_b, "\n")] = '\0';

            printf("Enter option C: ");
            fgets(q.option_c, sizeof(q.option_c), stdin);
            q.option_c[strcspn(q.option_c, "\n")] = '\0';

            printf("Enter option D: ");
            fgets(q.option_d, sizeof(q.option_d), stdin);
            q.option_d[strcspn(q.option_d, "\n")] = '\0';

            printf("Enter correct answer (a/b/c/d): ");
            scanf(" %c", &q.check);
            q.check = tolower(q.check);
            getchar(); // consume newline
        }
        fprintf(temp, "%s|%s|%s|%s|%s|%s|%c\n", q.course_code, q.question, q.option_a, q.option_b, q.option_c, q.option_d, q.check);
    }

    fclose(fp);
    fclose(temp);

    if (!found) {
        printf("Question not found.\n");
        remove("temp.txt");
        return;
    }

    remove("mcq.txt");
    rename("temp.txt", "mcq.txt");
    printf("Question updated successfully.\n");
}


void deleteQuestion() {
    char teacherCode[50];
    const char *correctTeacherCode = "TEACHER123";

    printf("Enter teacher verification code to delete question: ");
    scanf("%49s", teacherCode);

    if (strcmp(teacherCode, correctTeacherCode) != 0) {
        printf("❌ Access denied. Invalid teacher code.\n");
        return;
    }

    char courseCode[20];
    printf("Enter course code of the question to delete: ");
    scanf("%19s", courseCode);

    char questionText[300];
    printf("Enter the exact question text to delete: ");
    getchar();
    fgets(questionText, sizeof(questionText), stdin);
    questionText[strcspn(questionText, "\n")] = '\0';

    FILE *fp = fopen("mcq.txt", "r");
    FILE *temp = fopen("temp.txt", "w");
    if (!fp || !temp) {
        perror("File error");
        if (fp) fclose(fp);
        if (temp) fclose(temp);
        return;
    }

    MCQ q;
    int found = 0;

    while (fscanf(fp, "%19[^|]|%299[^|]|%99[^|]|%99[^|]|%99[^|]|%99[^|]|%c\n",
                  q.course_code, q.question, q.option_a, q.option_b, q.option_c, q.option_d, &q.check) == 7) {
        if (strcmp(q.course_code, courseCode) == 0 && strcmp(q.question, questionText) == 0) {
            found = 1;
            // skip writing to delete question
            continue;
        }
        fprintf(temp, "%s|%s|%s|%s|%s|%s|%c\n", q.course_code, q.question, q.option_a, q.option_b, q.option_c, q.option_d, q.check);
    }

    fclose(fp);
    fclose(temp);

    if (!found) {
        printf("Question not found.\n");
        remove("temp.txt");
        return;
    }

    remove("mcq.txt");
    rename("temp.txt", "mcq.txt");
    printf("Question deleted successfully.\n");
}


void showQuestionsForTeacher(const char *course_code) {
    FILE *fp = fopen("mcq.txt", "r");
    if (!fp) {
        printf("No questions available.\n");
        return;
    }

    MCQ q;
    int found = 0;

    printf("Questions for course %s:\n\n", course_code);
    while (fscanf(fp, "%19[^|]|%299[^|]|%99[^|]|%99[^|]|%99[^|]|%99[^|]|%c\n",
                  q.course_code, q.question, q.option_a, q.option_b, q.option_c, q.option_d, &q.check) == 7) {
        if (strcmp(q.course_code, course_code) == 0) {
            found = 1;
            printf("Q: %s\n", q.question);
            printf("a) %s\n", q.option_a);
            printf("b) %s\n", q.option_b);
            printf("c) %s\n", q.option_c);
            printf("d) %s\n", q.option_d);
            printf("Correct answer: %c\n", q.check);
            printf("------------------------------\n");
        }
    }

    fclose(fp);

    if (!found) {
        printf("No questions found for this course.\n");
    }
}

// Function to conduct exam
void studentExam(const char *student_id, const char *course_code) {
    FILE *fp = fopen("mcq.txt", "r");
    if (!fp) {
        printf("No questions available.\n");
        return;
    }

    MCQ questions[100];
    int total_questions = 0;

    // Load only questions for the requested course_code
    while (fscanf(fp, "%19[^|]|%299[^|]|%99[^|]|%99[^|]|%99[^|]|%99[^|]|%c\n",
                  questions[total_questions].course_code,
                  questions[total_questions].question,
                  questions[total_questions].option_a,
                  questions[total_questions].option_b,
                  questions[total_questions].option_c,
                  questions[total_questions].option_d,
                  &questions[total_questions].check) == 7) {
        if (strcmp(questions[total_questions].course_code, course_code) == 0) {
            total_questions++;
            if (total_questions >= 100) break;
        }
    }
    fclose(fp);

    if (total_questions == 0) {
        printf("No questions found for course %s.\n", course_code);
        return;
    }

    printf("Starting exam for course: %s\n", course_code);
    printf("Total questions: %d\n", total_questions);

    int score = 0;
    WrongAnswer wrongAnswers[100];
    int wrongCount = 0;

    for (int i = 0; i < total_questions; i++) {
        printf("\nQ%d: %s\n", i + 1, questions[i].question);
        printf("a) %s\n", questions[i].option_a);
        printf("b) %s\n", questions[i].option_b);
        printf("c) %s\n", questions[i].option_c);
        printf("d) %s\n", questions[i].option_d);

        char ans;
        do {
            printf("Enter your answer (a/b/c/d): ");
            scanf(" %c", &ans);
            ans = tolower(ans);
        } while (ans != 'a' && ans != 'b' && ans != 'c' && ans != 'd');

        if (ans == questions[i].check) {
            score++;
        } else {
            // Store wrong answer details
            strcpy(wrongAnswers[wrongCount].question, questions[i].question);
            wrongAnswers[wrongCount].correct_answer = questions[i].check;
            wrongAnswers[wrongCount].student_answer = ans;
            wrongCount++;
        }
    }

    printf("\nExam finished! Your score: %d out of %d\n", score, total_questions);

    // Save exam result
    FILE *resfp = fopen("exam_results.txt", "a");
    if (resfp) {
        fprintf(resfp, "%s|%s|%d\n", student_id, course_code, score);
        fclose(resfp);
    } else {
        printf("Failed to save exam result.\n");
    }

    // Save wrong answers for review later
    FILE *wfp = fopen("wrong_answers.txt", "a");
    if (wfp) {
        for (int i = 0; i < wrongCount; i++) {
            fprintf(wfp, "%s|%s|%c|%c\n", student_id, wrongAnswers[i].question, wrongAnswers[i].correct_answer, wrongAnswers[i].student_answer);
        }
        fclose(wfp);
    }

    // Show review option
    char choice;
    printf("Do you want to review your wrong answers? (y/n): ");
    scanf(" %c", &choice);
    if (tolower(choice) == 'y') {
        printf("\nWrong answers review:\n");
        for (int i = 0; i < wrongCount; i++) {
            printf("Q: %s\n", wrongAnswers[i].question);
            printf("Your answer: %c | Correct answer: %c\n", wrongAnswers[i].student_answer, wrongAnswers[i].correct_answer);
            printf("-----------------------------\n");
        }
    }
}


// Assuming studentExam() is done as per previous code

void examRules() {
    printf("Exam Rules:\n");
    printf("1. No preview of questions before exam.\n");
    printf("2. Answer all questions carefully.\n");
    printf("3. No cheating allowed.\n");
    printf("4. Exam will be timed (if applicable).\n");
    printf("5. Once exam is finished, results will be displayed.\n\n");
}

void addExamResult(ExamResult *result) {
    FILE *fp = fopen("exam_results.txt", "a");
    if (!fp) {
        printf("Error: Unable to open results file.\n");
        return;
    }
    fprintf(fp, "%s|%s|%d\n", result->student_id, result->course_code, result->score);
    fclose(fp);
}

void displayExamResult(const ExamResult *result) {
    printf("Student ID: %s\n", result->student_id);
    printf("Course Code: %s\n", result->course_code);
    printf("Score: %d\n", result->score);
    printf("-------------------------\n");
}

void showAllResults(const char *student_id) {
    FILE *fp = fopen("exam_results.txt", "r");
    if (!fp) {
        printf("No exam results found.\n");
        return;
    }

    ExamResult result;
    int found = 0;

    printf("Exam Results for Student ID: %s\n", student_id);
    printf("------------------------------\n");

    while (fscanf(fp, "%19[^|]|%19[^|]|%d\n", result.student_id, result.course_code, &result.score) == 3) {
        if (strcmp(result.student_id, student_id) == 0) {
            displayExamResult(&result);
            found = 1;
        }
    }

    fclose(fp);

    if (!found) {
        printf("No exam results found for this student.\n");
    }
}


// Add counseling
void addCounseling(const Counseling *c) {
    FILE *fp = fopen(COUNSELING_FILE, "a");
    if (!fp) {
        printf("Error opening counseling file.\n");
        return;
    }
    fprintf(fp, "%s|%s|%s|%s|%s|%s|%s\n", c->student_id, c->student_name, c->teacher_id, c->teacher_name, c->date, c->topic, c->notes);
    fclose(fp);
    printf("Counseling record added.\n");
}

// Show counseling records for a student
void showCounselings(const char *student_id) {
    FILE *fp = fopen(COUNSELING_FILE, "r");
    if (!fp) {
        printf("No counseling records found.\n");
        return;
    }

    Counseling c;
    int found = 0;
    printf("Counseling records for student ID: %s\n", student_id);
    printf("------------------------------------\n");

    while (fscanf(fp, "%19[^|]|%49[^|]|%19[^|]|%49[^|]|%19[^|]|%99[^|]|%299[^\n]\n",
                  c.student_id, c.student_name, c.teacher_id, c.teacher_name, c.date, c.topic, c.notes) == 7) {
        if (strcmp(c.student_id, student_id) == 0) {
            found = 1;
            printf("Date: %s\nTeacher: %s (%s)\nTopic: %s\nNotes: %s\n--------------------------\n",
                   c.date, c.teacher_name, c.teacher_id, c.topic, c.notes);
        }
    }
    fclose(fp);

    if (!found) {
        printf("No counseling records found for this student.\n");
    }
}

// Update counseling (match by student_id and date)
void updateCounseling(const char *student_id, const char *date) {
    FILE *fp = fopen(COUNSELING_FILE, "r");
    FILE *temp = fopen("temp.txt", "w");
    if (!fp || !temp) {
        printf("Error opening files.\n");
        return;
    }

    Counseling c;
    int updated = 0;

    while (fscanf(fp, "%19[^|]|%49[^|]|%19[^|]|%49[^|]|%19[^|]|%99[^|]|%299[^\n]\n",
                  c.student_id, c.student_name, c.teacher_id, c.teacher_name, c.date, c.topic, c.notes) == 7) {
        if (strcmp(c.student_id, student_id) == 0 && strcmp(c.date, date) == 0) {
            // Prompt for updated info
            printf("Updating counseling record for %s on %s\n", student_id, date);
            printf("Enter new topic: ");
            fgets(c.topic, sizeof(c.topic), stdin);
            c.topic[strcspn(c.topic, "\n")] = '\0';  // remove newline

            printf("Enter new notes: ");
            fgets(c.notes, sizeof(c.notes), stdin);
            c.notes[strcspn(c.notes, "\n")] = '\0';

            updated = 1;
        }
        fprintf(temp, "%s|%s|%s|%s|%s|%s|%s\n", c.student_id, c.student_name, c.teacher_id, c.teacher_name, c.date, c.topic, c.notes);
    }

    fclose(fp);
    fclose(temp);

    if (updated) {
        remove(COUNSELING_FILE);
        rename("temp.txt", COUNSELING_FILE);
        printf("Counseling record updated.\n");
    } else {
        remove("temp.txt");
        printf("Record not found.\n");
    }
}

// Delete counseling (match by student_id and date)
void deleteCounseling(const char *student_id, const char *date) {
    FILE *fp = fopen(COUNSELING_FILE, "r");
    FILE *temp = fopen("temp.txt", "w");
    if (!fp || !temp) {
        printf("Error opening files.\n");
        return;
    }

    Counseling c;
    int deleted = 0;

    while (fscanf(fp, "%19[^|]|%49[^|]|%19[^|]|%49[^|]|%19[^|]|%99[^|]|%299[^\n]\n",
                  c.student_id, c.student_name, c.teacher_id, c.teacher_name, c.date, c.topic, c.notes) == 7) {
        if (strcmp(c.student_id, student_id) == 0 && strcmp(c.date, date) == 0) {
            deleted = 1; // skip writing this record (delete)
            continue;
        }
        fprintf(temp, "%s|%s|%s|%s|%s|%s|%s\n", c.student_id, c.student_name, c.teacher_id, c.teacher_name, c.date, c.topic, c.notes);
    }

    fclose(fp);
    fclose(temp);

    if (deleted) {
        remove(COUNSELING_FILE);
        rename("temp.txt", COUNSELING_FILE);
        printf("Counseling record deleted.\n");
    } else {
        remove("temp.txt");
        printf("Record not found.\n");
    }
}

// Add media link
void addMediaLink(const MediaLink *m) {
    FILE *fp = fopen(MEDIA_FILE, "a");
    if (!fp) {
        printf("Error opening media file.\n");
        return;
    }
    fprintf(fp, "%s|%s|%s|%s\n", m->title, m->course_code, m->media_type, m->url);
    fclose(fp);
    printf("Media link added.\n");
}

// Show all media links for a course
void showMediaLinks(const char *course_code) {
    FILE *fp = fopen(MEDIA_FILE, "r");
    if (!fp) {
        printf("No media links found.\n");
        return;
    }

    MediaLink m;
    int found = 0;

    printf("Media links for course: %s\n", course_code);
    printf("-----------------------------\n");

    while (fscanf(fp, "%99[^|]|%19[^|]|%19[^|]|%199[^\n]\n", m.title, m.course_code, m.media_type, m.url) == 4) {
        if (strcmp(m.course_code, course_code) == 0) {
            found = 1;
            printf("Title: %s\nType: %s\nURL: %s\n------------------\n", m.title, m.media_type, m.url);
        }
    }

    fclose(fp);

    if (!found) {
        printf("No media links found for this course.\n");
    }
}

// Update media link by course_code and title
void updateMediaLink(const char *course_code, const char *title) {
    FILE *fp = fopen(MEDIA_FILE, "r");
    FILE *temp = fopen("temp_media.txt", "w");
    if (!fp || !temp) {
        printf("Error opening files.\n");
        return;
    }

    MediaLink m;
    int updated = 0;

    while (fscanf(fp, "%99[^|]|%19[^|]|%19[^|]|%199[^\n]\n", m.title, m.course_code, m.media_type, m.url) == 4) {
        if (strcmp(m.course_code, course_code) == 0 && strcmp(m.title, title) == 0) {
            printf("Updating media link '%s' for course '%s'\n", title, course_code);
            printf("Enter new media type: ");
            fgets(m.media_type, sizeof(m.media_type), stdin);
            m.media_type[strcspn(m.media_type, "\n")] = '\0';

            printf("Enter new URL: ");
            fgets(m.url, sizeof(m.url), stdin);
            m.url[strcspn(m.url, "\n")] = '\0';

            updated = 1;
        }
        fprintf(temp, "%s|%s|%s|%s\n", m.title, m.course_code, m.media_type, m.url);
    }

    fclose(fp);
    fclose(temp);

    if (updated) {
        remove(MEDIA_FILE);
        rename("temp_media.txt", MEDIA_FILE);
        printf("Media link updated.\n");
    } else {
        remove("temp_media.txt");
        printf("Media link not found.\n");
    }
}

// Delete media link by course_code and title
void deleteMediaLink(const char *course_code, const char *title) {
    FILE *fp = fopen(MEDIA_FILE, "r");
    FILE *temp = fopen("temp_media.txt", "w");
    if (!fp || !temp) {
        printf("Error opening files.\n");
        return;
    }

    MediaLink m;
    int deleted = 0;

    while (fscanf(fp, "%99[^|]|%19[^|]|%19[^|]|%199[^\n]\n", m.title, m.course_code, m.media_type, m.url) == 4) {
        if (strcmp(m.course_code, course_code) == 0 && strcmp(m.title, title) == 0) {
            deleted = 1;  // skip this record
            continue;
        }
        fprintf(temp, "%s|%s|%s|%s\n", m.title, m.course_code, m.media_type, m.url);
    }

    fclose(fp);
    fclose(temp);

    if (deleted) {
        remove(MEDIA_FILE);
        rename("temp_media.txt", MEDIA_FILE);
        printf("Media link deleted.\n");
    } else {
        remove("temp_media.txt");
        printf("Media link not found.\n");
    }
}



void studentMenu() {
    int choice;
    while (1) {
        printf("\n--- Student Menu ---\n");
        printf("1. Registration\n");
        printf("2. Login\n");
        printf("3. View Course\n");
        printf("4. Exam Instructions\n");
        printf("5. Take Exam\n");
        printf("6. View PDF Files\n");
        printf("7. View Web Page\n");
        printf("8. View My Results\n");
        printf("9. Send Counseling Message\n");
        printf("10. Logout\n");
        printf("Enter choice: ");
        scanf("%d", &choice);
        clearInputBuffer();

        switch (choice) {
            case 1: registerUser(); break;
            case 2: loginUser(); break;
            case 3: viewCourses(); break;
            case 4: examInstructions(); break;
            case 5: takeExam(); break;
            case 6: viewPdfFiles(); break;
            case 7: viewWebPage(); break;
            case 8: viewMyResults(); break;
            case 9: sendCounselingMessage(); break;
            case 10: printf("Logging out...\n"); return;
            default: printf("Invalid choice. Please try again.\n");
        }
    }
}



void teacherMenu() {
    int choice;
    while (1) {
        printf("\n--- Teacher Menu ---\n");
        printf("1. Registration (Verification)\n");
        printf("2. Login\n");
        printf("3. View Course\n");
        printf("4. Update Question\n");
        printf("5. Add Question\n");
        printf("6. Delete Question\n");
        printf("7. Add Video\n");
        printf("8. Add Web\n");
        printf("9. Add PDF\n");
        printf("10. Show All Results\n");
        printf("11. Counseling Messages\n");
        printf("12. Logout\n");
        printf("Enter choice: ");
        scanf("%d", &choice);
        clearInputBuffer();

        switch (choice) {
            case 1: teacherRegistration(); break;
            case 2: loginTeacher(); break;
            case 3: viewCourses(); break;
            case 4: updateQuestion(); break;
            case 5: addQuestion(); break;
            case 6: deleteQuestion(); break;
            case 7: addVideo(); break;
            case 8: addWeb(); break;
            case 9: addPdf(); break;
            case 10: showAllResultsTeacher(); break;
            case 11: counselingMessagesTeacher(); break;
            case 12: printf("Logging out...\n"); return;
            default: printf("Invalid choice. Please try again.\n");
        }
    }
}



void adminMenu() {
    int choice;
    while (1) {
        printf("\n--- Admin Menu ---\n");
        printf("1. Login\n");
        printf("2. View Course\n");
        printf("3. Update Course\n");
        printf("4. Add Course\n");
        printf("5. Delete Course\n");
        printf("6. Student Info\n");
        printf("7. Teacher Info\n");
        printf("8. All Results\n");
        printf("9. Logout\n");
        printf("Enter choice: ");
        scanf("%d", &choice);
        clearInputBuffer();

        switch (choice) {
            case 1: loginAdmin(); break;
            case 2: viewCoursesAdmin(); break;
            case 3: updateCourse(); break;
            case 4: addCourse(); break;
            case 5: deleteCourse(); break;
            case 6: showStudentInfo(); break;
            case 7: showTeacherInfo(); break;
            case 8: showAllResultsAdmin(); break;
            case 9: printf("Logging out...\n"); return;
            default: printf("Invalid choice. Please try again.\n");
        }
    }
}


void mainMenu() {
    int choice;
    while (1) {
        printf("\n=== Online Exam System ===\n");
        printf("--- Main Menu ---\n");
        printf("1. Student Menu\n");
        printf("2. Teacher Menu\n");
        printf("3. Admin Menu\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        clearInputBuffer();

        switch (choice) {
            case 1:
                studentMenu();
                break;
            case 2:
                teacherMenu();
                break;
            case 3:
                adminMenu();
                break;
            case 4:
                printf("Exiting program. Bye!\n");
                return;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }
}

int main() {
    mainMenu();
    return 0;
}








